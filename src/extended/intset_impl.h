/*
  Copyright (c) 2014 Dirk Willrodt <willrodt@zbh.uni-hamburg.de>
  Copyright (c) 2014 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
  THIS FILE IS GENERATED by
  scripts/gen-intsets.rb.
  DO NOT EDIT.
*/

#ifndef INTSET_IMPL_H
#define INTSET_IMPL_H

#include <inttypes.h>
#include <limits.h>

#include "core/ma.h"
#include "core/assert_api.h"
#include "core/intbits.h"
#include "core/unused_api.h"

#define BITS_FOR_SIZE(SIZE)     ((SIZE) * CHAR_BIT)
#define ELEM2SECTION(LOGVAL,X)  ((X) >> (LOGVAL))
#define SECTIONMINELEM(S)       ((S) << intset->logsectionsize)

GT_UNUSED static size_t
gt_intset_8_size(GtUword maxelement, GtUword num_of_elems)
{
  size_t logsectionsize = (sizeof (uint8_t)) + CHAR_BIT;
  return sizeof (uint8_t) * num_of_elems +
    sizeof (GtUword) * (ELEM2SECTION(logsectionsize, maxelement) + 1);
}

struct GtIntset8
{
  uint8_t *elements;
  GtUword      *sectionstart;
  size_t        logsectionsize;
  GtUword       nextfree,
                maxelement,
                currentsectionnum,
                numofsections,
                num_of_elems,
                previouselem;
};

GT_UNUSED static GtIntset8 *
gt_intset_8_new(GtUword max_elem, GtUword num_of_elems)
{
  GtIntset8 *intset = gt_malloc(sizeof (*intset));
  GtUword idx;

  intset->elements =
    gt_malloc(sizeof (*intset->elements) * num_of_elems);
  intset->logsectionsize = sizeof (uint8_t) * CHAR_BIT;
  intset->nextfree = 0;
  intset->numofsections = ELEM2SECTION(intset->logsectionsize, max_elem) + 1;
  intset->sectionstart = gt_malloc(sizeof (*intset->sectionstart) *
                                   (intset->numofsections + 1));
  intset->sectionstart[0] = 0;
  for (idx = (GtUword) 1; idx <= intset->numofsections; idx++) {
    intset->sectionstart[idx] = num_of_elems;
  }
  intset->maxelement = max_elem;
  intset->currentsectionnum = 0;
  intset->num_of_elems = num_of_elems;
  intset->previouselem = ULONG_MAX;
  return intset;
}

GT_UNUSED static void
gt_intset_8_delete(GtIntset8 *intset)
{
  if (intset != NULL) {
    gt_free(intset->elements);
    gt_free(intset->sectionstart);
    gt_free(intset);
  }
}

GT_UNUSED static void
gt_intset_8_add(GtIntset8 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  gt_assert(intset->nextfree < intset->num_of_elems &&
            elem <= intset->maxelement &&
            (intset->previouselem == ULONG_MAX || intset->previouselem < elem));
  while (elem >= SECTIONMINELEM(intset->currentsectionnum + 1)) {
    gt_assert(intset->currentsectionnum < intset->numofsections);
    secstart[intset->currentsectionnum + 1] = intset->nextfree;
    intset->currentsectionnum++;
  }
  gt_assert(SECTIONMINELEM(intset->currentsectionnum) <= elem &&
            elem < SECTIONMINELEM(intset->currentsectionnum+1) &&
            ELEM2SECTION(intset->logsectionsize,elem) ==
            intset->currentsectionnum);
  intset->elements[intset->nextfree++] = (uint8_t) elem;
  intset->previouselem = elem;
}

static bool gt_intset_8_binarysearch_is_member(
                                                   const uint8_t *leftptr,
                                                   const uint8_t *rightptr,
                                                   uint8_t elem)
{
  const uint8_t *midptr;
    while (leftptr <= rightptr) {
      midptr = leftptr + (((GtUword) (rightptr-leftptr)) >> 1);
      if (elem < *midptr) {
        rightptr = midptr-1;
      }
      else {
        if (elem > *midptr)
          leftptr = midptr + 1;
        else
          return true;
      }
    }
  return false;
}

GT_UNUSED static bool
gt_intset_8_is_member(const GtIntset8 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  if (elem <= intset->maxelement)
  {
    const GtUword sectionnum = ELEM2SECTION(intset->logsectionsize, elem);

    if (secstart[sectionnum] < secstart[sectionnum+1]) {
      return gt_intset_8_binarysearch_is_member(
                              intset->elements + secstart[sectionnum],
                              intset->elements + secstart[sectionnum+1] - 1,
                              (uint64_t) elem);
    }
  }
  return false;
}

GT_UNUSED static bool
gt_intset_8_is_member_fp(const void *set, GtUword elem)
{
  return gt_intset_8_is_member((const GtIntset8*) set, elem);
}

static GtUword gt_intset_8_binarysearch_pos2seqnum(
                                                   const uint8_t *leftptr,
                                                   const uint8_t *rightptr,
                                                   uint8_t pos)
{
  const uint8_t *midptr,
                   *found = NULL,
                   *leftorig = leftptr;

  gt_assert(leftptr <= rightptr);
  if (pos < *leftptr)
    return 0;

  if (pos > *rightptr)
    return 1UL + (GtUword) (rightptr - leftptr);

  gt_assert(pos > *leftptr && pos < *rightptr);
  while (leftptr <= rightptr) {
    midptr = leftptr + ((GtUword) (rightptr - leftptr) >> 1);
    if (pos < *midptr)
      rightptr = midptr - 1;
    else {
      found = midptr;
      if (pos > *midptr)
        leftptr = midptr + 1;
      else
        break;
    }
  }
  gt_assert(found != NULL && found >= leftorig);
  return 1UL + (GtUword) (found - leftorig);
}

GT_UNUSED static GtUword
gt_intset_8_pos2seqnum(const GtIntset8 *intset, GtUword pos)
{
  GtUword sectionnum = ELEM2SECTION(intset->logsectionsize,pos);

  gt_assert(pos <= intset->maxelement);
  if (intset->sectionstart[sectionnum] < intset->sectionstart[sectionnum+1]) {
    return intset->sectionstart[sectionnum] +
           gt_intset_8_binarysearch_pos2seqnum(
                     intset->elements + intset->sectionstart[sectionnum],
                     intset->elements + intset->sectionstart[sectionnum+1] - 1,
                     (uint8_t) pos);
  }
  return intset->sectionstart[sectionnum];
}

GT_UNUSED static GtUword
gt_intset_8_pos2seqnum_fp(const void *set, GtUword pos)
{
  return gt_intset_8_pos2seqnum((const GtIntset8*) set, pos);
}

GT_UNUSED static size_t
gt_intset_16_size(GtUword maxelement, GtUword num_of_elems)
{
  size_t logsectionsize = (sizeof (uint16_t)) + CHAR_BIT;
  return sizeof (uint16_t) * num_of_elems +
    sizeof (GtUword) * (ELEM2SECTION(logsectionsize, maxelement) + 1);
}

struct GtIntset16
{
  uint16_t *elements;
  GtUword      *sectionstart;
  size_t        logsectionsize;
  GtUword       nextfree,
                maxelement,
                currentsectionnum,
                numofsections,
                num_of_elems,
                previouselem;
};

GT_UNUSED static GtIntset16 *
gt_intset_16_new(GtUword max_elem, GtUword num_of_elems)
{
  GtIntset16 *intset = gt_malloc(sizeof (*intset));
  GtUword idx;

  intset->elements =
    gt_malloc(sizeof (*intset->elements) * num_of_elems);
  intset->logsectionsize = sizeof (uint16_t) * CHAR_BIT;
  intset->nextfree = 0;
  intset->numofsections = ELEM2SECTION(intset->logsectionsize, max_elem) + 1;
  intset->sectionstart = gt_malloc(sizeof (*intset->sectionstart) *
                                   (intset->numofsections + 1));
  intset->sectionstart[0] = 0;
  for (idx = (GtUword) 1; idx <= intset->numofsections; idx++) {
    intset->sectionstart[idx] = num_of_elems;
  }
  intset->maxelement = max_elem;
  intset->currentsectionnum = 0;
  intset->num_of_elems = num_of_elems;
  intset->previouselem = ULONG_MAX;
  return intset;
}

GT_UNUSED static void
gt_intset_16_delete(GtIntset16 *intset)
{
  if (intset != NULL) {
    gt_free(intset->elements);
    gt_free(intset->sectionstart);
    gt_free(intset);
  }
}

GT_UNUSED static void
gt_intset_16_add(GtIntset16 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  gt_assert(intset->nextfree < intset->num_of_elems &&
            elem <= intset->maxelement &&
            (intset->previouselem == ULONG_MAX || intset->previouselem < elem));
  while (elem >= SECTIONMINELEM(intset->currentsectionnum + 1)) {
    gt_assert(intset->currentsectionnum < intset->numofsections);
    secstart[intset->currentsectionnum + 1] = intset->nextfree;
    intset->currentsectionnum++;
  }
  gt_assert(SECTIONMINELEM(intset->currentsectionnum) <= elem &&
            elem < SECTIONMINELEM(intset->currentsectionnum+1) &&
            ELEM2SECTION(intset->logsectionsize,elem) ==
            intset->currentsectionnum);
  intset->elements[intset->nextfree++] = (uint16_t) elem;
  intset->previouselem = elem;
}

static bool gt_intset_16_binarysearch_is_member(
                                                   const uint16_t *leftptr,
                                                   const uint16_t *rightptr,
                                                   uint16_t elem)
{
  const uint16_t *midptr;
    while (leftptr <= rightptr) {
      midptr = leftptr + (((GtUword) (rightptr-leftptr)) >> 1);
      if (elem < *midptr) {
        rightptr = midptr-1;
      }
      else {
        if (elem > *midptr)
          leftptr = midptr + 1;
        else
          return true;
      }
    }
  return false;
}

GT_UNUSED static bool
gt_intset_16_is_member(const GtIntset16 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  if (elem <= intset->maxelement)
  {
    const GtUword sectionnum = ELEM2SECTION(intset->logsectionsize, elem);

    if (secstart[sectionnum] < secstart[sectionnum+1]) {
      return gt_intset_16_binarysearch_is_member(
                              intset->elements + secstart[sectionnum],
                              intset->elements + secstart[sectionnum+1] - 1,
                              (uint64_t) elem);
    }
  }
  return false;
}

GT_UNUSED static bool
gt_intset_16_is_member_fp(const void *set, GtUword elem)
{
  return gt_intset_16_is_member((const GtIntset16*) set, elem);
}

static GtUword gt_intset_16_binarysearch_pos2seqnum(
                                                   const uint16_t *leftptr,
                                                   const uint16_t *rightptr,
                                                   uint16_t pos)
{
  const uint16_t *midptr,
                   *found = NULL,
                   *leftorig = leftptr;

  gt_assert(leftptr <= rightptr);
  if (pos < *leftptr)
    return 0;

  if (pos > *rightptr)
    return 1UL + (GtUword) (rightptr - leftptr);

  gt_assert(pos > *leftptr && pos < *rightptr);
  while (leftptr <= rightptr) {
    midptr = leftptr + ((GtUword) (rightptr - leftptr) >> 1);
    if (pos < *midptr)
      rightptr = midptr - 1;
    else {
      found = midptr;
      if (pos > *midptr)
        leftptr = midptr + 1;
      else
        break;
    }
  }
  gt_assert(found != NULL && found >= leftorig);
  return 1UL + (GtUword) (found - leftorig);
}

GT_UNUSED static GtUword
gt_intset_16_pos2seqnum(const GtIntset16 *intset, GtUword pos)
{
  GtUword sectionnum = ELEM2SECTION(intset->logsectionsize,pos);

  gt_assert(pos <= intset->maxelement);
  if (intset->sectionstart[sectionnum] < intset->sectionstart[sectionnum+1]) {
    return intset->sectionstart[sectionnum] +
           gt_intset_16_binarysearch_pos2seqnum(
                     intset->elements + intset->sectionstart[sectionnum],
                     intset->elements + intset->sectionstart[sectionnum+1] - 1,
                     (uint16_t) pos);
  }
  return intset->sectionstart[sectionnum];
}

GT_UNUSED static GtUword
gt_intset_16_pos2seqnum_fp(const void *set, GtUword pos)
{
  return gt_intset_16_pos2seqnum((const GtIntset16*) set, pos);
}

GT_UNUSED static size_t
gt_intset_32_size(GtUword maxelement, GtUword num_of_elems)
{
  size_t logsectionsize = (sizeof (uint32_t)) + CHAR_BIT;
  return sizeof (uint32_t) * num_of_elems +
    sizeof (GtUword) * (ELEM2SECTION(logsectionsize, maxelement) + 1);
}

struct GtIntset32
{
  uint32_t *elements;
  GtUword      *sectionstart;
  size_t        logsectionsize;
  GtUword       nextfree,
                maxelement,
                currentsectionnum,
                numofsections,
                num_of_elems,
                previouselem;
};

GT_UNUSED static GtIntset32 *
gt_intset_32_new(GtUword max_elem, GtUword num_of_elems)
{
  GtIntset32 *intset = gt_malloc(sizeof (*intset));
  GtUword idx;

  intset->elements =
    gt_malloc(sizeof (*intset->elements) * num_of_elems);
  intset->logsectionsize = sizeof (uint32_t) * CHAR_BIT;
  intset->nextfree = 0;
  intset->numofsections = ELEM2SECTION(intset->logsectionsize, max_elem) + 1;
  intset->sectionstart = gt_malloc(sizeof (*intset->sectionstart) *
                                   (intset->numofsections + 1));
  intset->sectionstart[0] = 0;
  for (idx = (GtUword) 1; idx <= intset->numofsections; idx++) {
    intset->sectionstart[idx] = num_of_elems;
  }
  intset->maxelement = max_elem;
  intset->currentsectionnum = 0;
  intset->num_of_elems = num_of_elems;
  intset->previouselem = ULONG_MAX;
  return intset;
}

GT_UNUSED static void
gt_intset_32_delete(GtIntset32 *intset)
{
  if (intset != NULL) {
    gt_free(intset->elements);
    gt_free(intset->sectionstart);
    gt_free(intset);
  }
}

GT_UNUSED static void
gt_intset_32_add(GtIntset32 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  gt_assert(intset->nextfree < intset->num_of_elems &&
            elem <= intset->maxelement &&
            (intset->previouselem == ULONG_MAX || intset->previouselem < elem));
  while (elem >= SECTIONMINELEM(intset->currentsectionnum + 1)) {
    gt_assert(intset->currentsectionnum < intset->numofsections);
    secstart[intset->currentsectionnum + 1] = intset->nextfree;
    intset->currentsectionnum++;
  }
  gt_assert(SECTIONMINELEM(intset->currentsectionnum) <= elem &&
            elem < SECTIONMINELEM(intset->currentsectionnum+1) &&
            ELEM2SECTION(intset->logsectionsize,elem) ==
            intset->currentsectionnum);
  intset->elements[intset->nextfree++] = (uint32_t) elem;
  intset->previouselem = elem;
}

static bool gt_intset_32_binarysearch_is_member(
                                                   const uint32_t *leftptr,
                                                   const uint32_t *rightptr,
                                                   uint32_t elem)
{
  const uint32_t *midptr;
    while (leftptr <= rightptr) {
      midptr = leftptr + (((GtUword) (rightptr-leftptr)) >> 1);
      if (elem < *midptr) {
        rightptr = midptr-1;
      }
      else {
        if (elem > *midptr)
          leftptr = midptr + 1;
        else
          return true;
      }
    }
  return false;
}

GT_UNUSED static bool
gt_intset_32_is_member(const GtIntset32 *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  if (elem <= intset->maxelement)
  {
    const GtUword sectionnum = ELEM2SECTION(intset->logsectionsize, elem);

    if (secstart[sectionnum] < secstart[sectionnum+1]) {
      return gt_intset_32_binarysearch_is_member(
                              intset->elements + secstart[sectionnum],
                              intset->elements + secstart[sectionnum+1] - 1,
                              (uint64_t) elem);
    }
  }
  return false;
}

GT_UNUSED static bool
gt_intset_32_is_member_fp(const void *set, GtUword elem)
{
  return gt_intset_32_is_member((const GtIntset32*) set, elem);
}

static GtUword gt_intset_32_binarysearch_pos2seqnum(
                                                   const uint32_t *leftptr,
                                                   const uint32_t *rightptr,
                                                   uint32_t pos)
{
  const uint32_t *midptr,
                   *found = NULL,
                   *leftorig = leftptr;

  gt_assert(leftptr <= rightptr);
  if (pos < *leftptr)
    return 0;

  if (pos > *rightptr)
    return 1UL + (GtUword) (rightptr - leftptr);

  gt_assert(pos > *leftptr && pos < *rightptr);
  while (leftptr <= rightptr) {
    midptr = leftptr + ((GtUword) (rightptr - leftptr) >> 1);
    if (pos < *midptr)
      rightptr = midptr - 1;
    else {
      found = midptr;
      if (pos > *midptr)
        leftptr = midptr + 1;
      else
        break;
    }
  }
  gt_assert(found != NULL && found >= leftorig);
  return 1UL + (GtUword) (found - leftorig);
}

GT_UNUSED static GtUword
gt_intset_32_pos2seqnum(const GtIntset32 *intset, GtUword pos)
{
  GtUword sectionnum = ELEM2SECTION(intset->logsectionsize,pos);

  gt_assert(pos <= intset->maxelement);
  if (intset->sectionstart[sectionnum] < intset->sectionstart[sectionnum+1]) {
    return intset->sectionstart[sectionnum] +
           gt_intset_32_binarysearch_pos2seqnum(
                     intset->elements + intset->sectionstart[sectionnum],
                     intset->elements + intset->sectionstart[sectionnum+1] - 1,
                     (uint32_t) pos);
  }
  return intset->sectionstart[sectionnum];
}

GT_UNUSED static GtUword
gt_intset_32_pos2seqnum_fp(const void *set, GtUword pos)
{
  return gt_intset_32_pos2seqnum((const GtIntset32*) set, pos);
}
#endif
