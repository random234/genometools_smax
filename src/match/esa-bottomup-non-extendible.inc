/*
  Copyright (c) 2011-2012 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2011-2012 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
  THIS FILE IS GENERATED by
  ./gen-esa-bottomup.rb
  -k non_extendible
  --reader.
  DO NOT EDIT.
*/

#include <limits.h>
#include "core/ma.h"
#include "esa-seqread.h"
#include "seqnumrelpos.h"

static void initBUinfo_non_extendible(GtBUinfo_non_extendible *,
                              GtBUstate_non_extendible *);

static void freeBUinfo_non_extendible(GtBUinfo_non_extendible *,
                              GtBUstate_non_extendible *);

static int processleafedge_non_extendible(bool,
    GtUword,
    GtBUinfo_non_extendible *,
    GtUword, /* seqnum */
    GtUword, /* relpos */
    GtBUstate_non_extendible *,
    GtError *err);

static int processbranchingedge_non_extendible(bool firstsucc,
    GtUword,
    GtBUinfo_non_extendible *,
    GtUword,
    GtUword,
    GtBUinfo_non_extendible *,
    GtBUstate_non_extendible *,
    GtError *);

static int processlcpinterval_non_extendible(GtUword,
    GtBUinfo_non_extendible *,
    GtBUstate_non_extendible *,
    GtError *err);

#define TOP_ESA_BOTTOMUP_non_extendible\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo-1]

#define POP_ESA_BOTTOMUP_non_extendible\
        (stack->spaceGtBUItvinfo + (--stack->nextfreeGtBUItvinfo))

#define PUSH_ESA_BOTTOMUP_non_extendible(LCP,LB)\
        if (stack->nextfreeGtBUItvinfo >= stack->allocatedGtBUItvinfo)\
        {\
          gt_assert(stack->nextfreeGtBUItvinfo ==\
                    stack->allocatedGtBUItvinfo);\
          stack->spaceGtBUItvinfo\
            = allocateBUstack_non_extendible(stack->spaceGtBUItvinfo,\
                              stack->allocatedGtBUItvinfo,\
                              stack->allocatedGtBUItvinfo+incrementstacksize,\
                              bustate);\
          stack->allocatedGtBUItvinfo += incrementstacksize;\
        }\
        gt_assert(stack->spaceGtBUItvinfo != NULL);\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo].lcp = LCP;\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo].lb = LB;\
        stack->spaceGtBUItvinfo[stack->nextfreeGtBUItvinfo++].rb = ULONG_MAX

typedef struct
{
  GtUword lcp, lb, rb;
  GtBUinfo_non_extendible info;
} GtBUItvinfo_non_extendible;

typedef struct
{
  GtBUItvinfo_non_extendible *spaceGtBUItvinfo;
  GtUword allocatedGtBUItvinfo,
                nextfreeGtBUItvinfo;
} GtArrayGtBUItvinfo_non_extendible;

GtArrayGtBUItvinfo_non_extendible *gt_GtArrayGtBUItvinfo_new_non_extendible(void)
{
  GtArrayGtBUItvinfo_non_extendible *stack = gt_malloc(sizeof (*stack));

  stack->spaceGtBUItvinfo = NULL;
  stack->allocatedGtBUItvinfo = stack->nextfreeGtBUItvinfo = 0;
  return stack;
}

void gt_GtArrayGtBUItvinfo_delete_non_extendible(
                           GtArrayGtBUItvinfo_non_extendible *stack,
                           GtBUstate_non_extendible *state)
{
  GtUword idx;

  for (idx=0; idx<stack->allocatedGtBUItvinfo; idx++)
  {
    freeBUinfo_non_extendible(&stack->spaceGtBUItvinfo[idx].info,state);
  }
  gt_free(stack->spaceGtBUItvinfo);
  gt_free(stack);
}

static GtBUItvinfo_non_extendible *allocateBUstack_non_extendible(
                                   GtBUItvinfo_non_extendible *ptr,
                                   GtUword currentallocated,
                                   GtUword allocated,
                                   GtBUstate_non_extendible *state)
{
  GtUword idx;
  GtBUItvinfo_non_extendible *itvinfo;

  itvinfo = gt_realloc(ptr,sizeof (*itvinfo) * allocated);
  gt_assert(allocated > currentallocated);
  for (idx=currentallocated; idx<allocated; idx++)
  {
    initBUinfo_non_extendible(&itvinfo[idx].info,state);
  }
  gt_assert(itvinfo != NULL);
  return itvinfo;
}

static int gt_esa_bottomup_non_extendible(Sequentialsuffixarrayreader *ssar,
                    GtBUstate_non_extendible *bustate,
                    const GtSeqnumrelpos *snrp,
                    GtError *err)
{
  const GtUword incrementstacksize = 32UL;
  GtUword lcpvalue,
                previoussuffix = 0,
                idx,
                numberofsuffixes,
                lastsuftabvalue = 0;
  GtBUItvinfo_non_extendible *lastinterval = NULL;
  bool haserr = false, firstedge, firstedgefromroot = true;
  GtArrayGtBUItvinfo_non_extendible *stack;

  stack = gt_GtArrayGtBUItvinfo_new_non_extendible();
  PUSH_ESA_BOTTOMUP_non_extendible(0,0);
  numberofsuffixes = gt_Sequentialsuffixarrayreader_nonspecials(ssar);
  for (idx = 0; !haserr && idx < numberofsuffixes; idx++)
  {
    SSAR_NEXTSEQUENTIALLCPTABVALUEWITHLAST(lcpvalue,lastsuftabvalue,ssar);
    SSAR_NEXTSEQUENTIALSUFTABVALUE(previoussuffix,ssar);
    gt_assert(stack->nextfreeGtBUItvinfo > 0);
    if (lcpvalue <= TOP_ESA_BOTTOMUP_non_extendible.lcp)
    {
      if (TOP_ESA_BOTTOMUP_non_extendible.lcp > 0 || !firstedgefromroot)
      {
        firstedge = false;
      } else
      {
        firstedge = true;
        firstedgefromroot = false;
      }
      if (processleafedge_non_extendible(firstedge,
                          TOP_ESA_BOTTOMUP_non_extendible.lcp,
                          &TOP_ESA_BOTTOMUP_non_extendible.info,
                          gt_seqnumrelpos_decode_seqnum(snrp,previoussuffix),
                          gt_seqnumrelpos_decode_relpos(snrp,previoussuffix),
                          bustate,
                          err) != 0)
      {
        haserr = true;
      }
    }
    gt_assert(lastinterval == NULL);
    while (!haserr && lcpvalue < TOP_ESA_BOTTOMUP_non_extendible.lcp)
    {
      lastinterval = POP_ESA_BOTTOMUP_non_extendible;
      lastinterval->rb = idx;
      if (processlcpinterval_non_extendible(lastinterval->lcp,
                             &lastinterval->info,
                             bustate,
                             err) != 0)
      {
        haserr = true;
      }
      if (lcpvalue <= TOP_ESA_BOTTOMUP_non_extendible.lcp)
      {
        if (TOP_ESA_BOTTOMUP_non_extendible.lcp > 0 || !firstedgefromroot)
        {
          firstedge = false;
        } else
        {
          firstedge = true;
          firstedgefromroot = false;
        }
        if (processbranchingedge_non_extendible(firstedge,
               TOP_ESA_BOTTOMUP_non_extendible.lcp,
               &TOP_ESA_BOTTOMUP_non_extendible.info,
               lastinterval->lcp,
               lastinterval->rb - lastinterval->lb + 1,
               &lastinterval->info,
               bustate,
               err) != 0)
        {
          haserr = true;
        }
        lastinterval = NULL;
      }
    }
    if (!haserr && lcpvalue > TOP_ESA_BOTTOMUP_non_extendible.lcp)
    {
      if (lastinterval != NULL)
      {
        GtUword lastintervallb = lastinterval->lb;
        GtUword lastintervallcp = lastinterval->lcp,
              lastintervalrb = lastinterval->rb;
        PUSH_ESA_BOTTOMUP_non_extendible(lcpvalue,lastintervallb);
        if (processbranchingedge_non_extendible(true,
                       TOP_ESA_BOTTOMUP_non_extendible.lcp,
                       &TOP_ESA_BOTTOMUP_non_extendible.info,
                       lastintervallcp,
                       lastintervalrb - lastintervallb + 1,
                       NULL,
                       bustate,
                       err) != 0)
        {
          haserr = true;
        }
        lastinterval = NULL;
      } else
      {
        PUSH_ESA_BOTTOMUP_non_extendible(lcpvalue,idx);
        if (processleafedge_non_extendible(true,
                            TOP_ESA_BOTTOMUP_non_extendible.lcp,
                            &TOP_ESA_BOTTOMUP_non_extendible.info,
                            gt_seqnumrelpos_decode_seqnum(snrp,previoussuffix),
                            gt_seqnumrelpos_decode_relpos(snrp,previoussuffix),
                            bustate,
                            err) != 0)
        {
          haserr = true;
        }
      }
    }
  }
  gt_assert(stack->nextfreeGtBUItvinfo > 0);
  if (!haserr && TOP_ESA_BOTTOMUP_non_extendible.lcp > 0)
  {
    /* no assignment to lastsuftabvalue */
    if (processleafedge_non_extendible(false,
                        TOP_ESA_BOTTOMUP_non_extendible.lcp,
                        &TOP_ESA_BOTTOMUP_non_extendible.info,
                        gt_seqnumrelpos_decode_seqnum(snrp,lastsuftabvalue),
                        gt_seqnumrelpos_decode_relpos(snrp,lastsuftabvalue),
                        bustate,
                        err) != 0)
    {
      haserr = true;
    } else
    {
      TOP_ESA_BOTTOMUP_non_extendible.rb = idx;
      if (processlcpinterval_non_extendible(TOP_ESA_BOTTOMUP_non_extendible.lcp,
                             &TOP_ESA_BOTTOMUP_non_extendible.info,
                             bustate,
                             err) != 0)
      {
        haserr = true;
      }
    }
  }
  gt_GtArrayGtBUItvinfo_delete_non_extendible(stack,bustate);
  return haserr ? -1 : 0;
}
