#!/usr/bin/env ruby
# Copyright (c) 2014 Dirk Willrodt <willrodt@zbh.uni-hamburg.de>
# Copyright (c) 2014 Center for Bioinformatics, University of Hamburg

# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

require 'optparse'
require 'ostruct'
require 'erb'

$:.unshift File.join(File.dirname(__FILE__), ".")
require 'codegen_module'

HEADER = <<-HEADER
/*
  Copyright (c) 2014 Dirk Willrodt <willrodt@zbh.uni-hamburg.de><% if name!="Dirk Willrodt" %>
  Copyright (c) <%=year%> <%=name%> <<%=email%>><% end %>
  Copyright (c) 2014<% if not year==2014 %>-<%=year%><% end %> Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/*
  THIS FILE IS GENERATED by\n  #{$0}.
  DO NOT EDIT.
*/

#ifndef INTSET_IMPL_H
#define INTSET_IMPL_H

#include <inttypes.h>
#include <limits.h>

#include "core/ma.h"
#include "core/assert_api.h"
#include "core/intbits.h"
#include "core/unused_api.h"

#define BITS_FOR_SIZE(SIZE)     ((SIZE) * CHAR_BIT)
#define ELEM2SECTION(LOGVAL,X)  ((X) >> (LOGVAL))
#define SECTIONMINELEM(S)       ((S) << intset->logsectionsize)
HEADER

CODE = <<-CODE

GT_UNUSED static size_t
gt_intset_<%=bits%>_size(GtUword maxelement, GtUword num_of_elems)
{
  size_t logsectionsize = (sizeof (uint<%=bits%>_t)) + CHAR_BIT;
  return sizeof (uint<%=bits%>_t) * num_of_elems +
    sizeof (GtUword) * (ELEM2SECTION(logsectionsize, maxelement) + 1);
}

struct GtIntset<%=bits%>
{
  uint<%=bits%>_t *elements;
  GtUword      *sectionstart;
  size_t        logsectionsize;
  GtUword       nextfree,
                maxelement,
                currentsectionnum,
                numofsections,
                num_of_elems,
                previouselem;
};

GT_UNUSED static GtIntset<%=bits%> *
gt_intset_<%=bits%>_new(GtUword max_elem, GtUword num_of_elems)
{
  GtIntset<%=bits%> *intset = gt_malloc(sizeof (*intset));
  GtUword idx;

  intset->elements =
    gt_malloc(sizeof (*intset->elements) * num_of_elems);
  intset->logsectionsize = sizeof (uint<%=bits%>_t) * CHAR_BIT;
  intset->nextfree = 0;
  intset->numofsections = ELEM2SECTION(intset->logsectionsize, max_elem) + 1;
  intset->sectionstart = gt_malloc(sizeof (*intset->sectionstart) *
                                   (intset->numofsections + 1));
  intset->sectionstart[0] = 0;
  for (idx = (GtUword) 1; idx <= intset->numofsections; idx++) {
    intset->sectionstart[idx] = num_of_elems;
  }
  intset->maxelement = max_elem;
  intset->currentsectionnum = 0;
  intset->num_of_elems = num_of_elems;
  intset->previouselem = ULONG_MAX;
  return intset;
}

GT_UNUSED static void
gt_intset_<%=bits%>_delete(GtIntset<%=bits%> *intset)
{
  if (intset != NULL) {
    gt_free(intset->elements);
    gt_free(intset->sectionstart);
    gt_free(intset);
  }
}

GT_UNUSED static void
gt_intset_<%=bits%>_add(GtIntset<%=bits%> *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  gt_assert(intset->nextfree < intset->num_of_elems &&
            elem <= intset->maxelement &&
            (intset->previouselem == ULONG_MAX || intset->previouselem < elem));
  while (elem >= SECTIONMINELEM(intset->currentsectionnum + 1)) {
    gt_assert(intset->currentsectionnum < intset->numofsections);
    secstart[intset->currentsectionnum + 1] = intset->nextfree;
    intset->currentsectionnum++;
  }
  gt_assert(SECTIONMINELEM(intset->currentsectionnum) <= elem &&
            elem < SECTIONMINELEM(intset->currentsectionnum+1) &&
            ELEM2SECTION(intset->logsectionsize,elem) ==
            intset->currentsectionnum);
  intset->elements[intset->nextfree++] = (uint<%=bits%>_t) elem;
  intset->previouselem = elem;
}

static bool gt_intset_<%=bits%>_binarysearch_is_member(
                                                   const uint<%=bits%>_t *leftptr,
                                                   const uint<%=bits%>_t *rightptr,
                                                   uint<%=bits%>_t elem)
{
  const uint<%=bits%>_t *midptr;
    while (leftptr <= rightptr) {
      midptr = leftptr + (((GtUword) (rightptr-leftptr)) >> 1);
      if (elem < *midptr) {
        rightptr = midptr-1;
      }
      else {
        if (elem > *midptr)
          leftptr = midptr + 1;
        else
          return true;
      }
    }
  return false;
}

GT_UNUSED static bool
gt_intset_<%=bits%>_is_member(const GtIntset<%=bits%> *intset, GtUword elem)
{
  GtUword *secstart = intset->sectionstart;
  if (elem <= intset->maxelement)
  {
    const GtUword sectionnum = ELEM2SECTION(intset->logsectionsize, elem);

    if (secstart[sectionnum] < secstart[sectionnum+1]) {
      return gt_intset_<%=bits%>_binarysearch_is_member(
                              intset->elements + secstart[sectionnum],
                              intset->elements + secstart[sectionnum+1] - 1,
                              (uint64_t) elem);
    }
  }
  return false;
}

GT_UNUSED static bool
gt_intset_<%=bits%>_is_member_fp(const void *set, GtUword elem)
{
  return gt_intset_<%=bits%>_is_member((const GtIntset<%=bits%>*) set, elem);
}

static GtUword gt_intset_<%=bits%>_binarysearch_pos2seqnum(
                                                   const uint<%=bits%>_t *leftptr,
                                                   const uint<%=bits%>_t *rightptr,
                                                   uint<%=bits%>_t pos)
{
  const uint<%=bits%>_t *midptr,
                   *found = NULL,
                   *leftorig = leftptr;

  gt_assert(leftptr <= rightptr);
  if (pos < *leftptr)
    return 0;

  if (pos > *rightptr)
    return 1UL + (GtUword) (rightptr - leftptr);

  gt_assert(pos > *leftptr && pos < *rightptr);
  while (leftptr <= rightptr) {
    midptr = leftptr + ((GtUword) (rightptr - leftptr) >> 1);
    if (pos < *midptr)
      rightptr = midptr - 1;
    else {
      found = midptr;
      if (pos > *midptr)
        leftptr = midptr + 1;
      else
        break;
    }
  }
  gt_assert(found != NULL && found >= leftorig);
  return 1UL + (GtUword) (found - leftorig);
}

GT_UNUSED static GtUword
gt_intset_<%=bits%>_pos2seqnum(const GtIntset<%=bits%> *intset, GtUword pos)
{
  GtUword sectionnum = ELEM2SECTION(intset->logsectionsize,pos);

  gt_assert(pos <= intset->maxelement);
  if (intset->sectionstart[sectionnum] < intset->sectionstart[sectionnum+1]) {
    return intset->sectionstart[sectionnum] +
           gt_intset_<%=bits%>_binarysearch_pos2seqnum(
                     intset->elements + intset->sectionstart[sectionnum],
                     intset->elements + intset->sectionstart[sectionnum+1] - 1,
                     (uint<%=bits%>_t) pos);
  }
  return intset->sectionstart[sectionnum];
}

GT_UNUSED static GtUword
gt_intset_<%=bits%>_pos2seqnum_fp(const void *set, GtUword pos)
{
  return gt_intset_<%=bits%>_pos2seqnum((const GtIntset<%=bits%>*) set, pos);
}
CODE

name, email = CodeGen.find_user_data()
year = Time.now.year

ERB.new(HEADER).run(binding)
bits = '8'
ERB.new(CODE).run(binding)
bits = '16'
ERB.new(CODE).run(binding)
bits = '32'
ERB.new(CODE).run(binding)
puts '#endif'
